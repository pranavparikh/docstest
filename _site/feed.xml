<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.1">Jekyll</generator><link href="http://0.0.0.0:8080/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:8080/" rel="alternate" type="text/html" /><updated>2018-06-18T21:26:26-07:00</updated><id>http://0.0.0.0:8080/</id><subtitle>OTTO!
</subtitle><entry><title type="html">State</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/State" rel="alternate" type="text/html" title="State" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20401-State</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/State">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./State&quot;&gt;State&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Mocking Utility Methods&quot;&gt;Mocking Utility Methods&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Rest APIs&quot;&gt;Rest APIs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Starting HTTPS server with Mock Server&quot;&gt;Starting HTTPS server with Mock Server&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. What is state?&lt;/h3&gt;
&lt;p&gt;State allows you to maintain state of your server, for example if a user is logged in or logged out. The mock server internally uses &lt;code&gt;Hapi&lt;/code&gt; node server, which helps you return the state of the current application state. Within any response handler, use &lt;code&gt;this.state('varName')&lt;/code&gt; to access an object stored in the state and this.state&lt;code&gt;('varName', 'varValue')&lt;/code&gt; where varValue can be any type of object you want to set the state.&lt;/p&gt;
&lt;h3&gt;2. How to set a state in mock server?&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
  path: '/api/login',
  label: 'LogIn',
  method: 'POST',
  handler: function(request, reply) {
    // now you can use this.state('loggedIn') in any route handler to see if the user has logged in
    this.state('loggedIn', true);
    reply().code(204);
  }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Mocking Utility Methods&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">State Mocking Utility Methods Rest APIs Starting HTTPS server with Mock Server Exercise 1. What is state? State allows you to maintain state of your server, for example if a user is logged in or logged out. The mock server internally uses Hapi node server, which helps you return the state of the current application state. Within any response handler, use this.state('varName') to access an object stored in the state and this.state('varName', 'varValue') where varValue can be any type of object you want to set the state. 2. How to set a state in mock server? shifu.route({ path: '/api/login', label: 'LogIn', method: 'POST', handler: function(request, reply) { // now you can use this.state('loggedIn') in any route handler to see if the user has logged in this.state('loggedIn', true); reply().code(204); } });</summary></entry><entry><title type="html">Starting HTTPS server with Mock Server</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Starting%20HTTPS%20server%20with%20Mock%20Server" rel="alternate" type="text/html" title="Starting HTTPS server with Mock Server" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20401-Starting%20HTTPS%20server%20with%20Mock%20Server</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Starting%20HTTPS%20server%20with%20Mock%20Server">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./State&quot;&gt;State&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Mocking Utility Methods&quot;&gt;Mocking Utility Methods&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Rest APIs&quot;&gt;Rest APIs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./Starting HTTPS server with Mock Server&quot;&gt;Starting HTTPS server with Mock Server&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Rest APIs&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. Updating run-mock-server-console.js to enable HTTPS&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;require('./endpoints');
var fs = require('fs');
var shifu = require('shifu');
 
shifu.start({
  host: &amp;quot;localhost&amp;quot;,  
  mockedDirectory: &amp;quot;./resources/mocked-data&amp;quot;,
  port: 8000,
  httpsPort: 4444,
  project: 'HelloShifu'
});
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The default port for HTTPS is &lt;code&gt;4444&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;2. Starting mock server with HTTPS enabled&lt;/h3&gt;
&lt;p&gt;Once you add the above code, the mock server will provide the HTTPS and HTTPS support by default. Hence when the mock server starts up, you will see both the ports open. Note that the mock server auto generates the certificates (key.pem and cert.pem). If you want to provide your own key and certificate, you can provide it under the mocked data directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Exercise&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">State Mocking Utility Methods Rest APIs Starting HTTPS server with Mock Server Exercise 1. Updating run-mock-server-console.js to enable HTTPS require('./endpoints'); var fs = require('fs'); var shifu = require('shifu'); shifu.start({ host: &amp;quot;localhost&amp;quot;, mockedDirectory: &amp;quot;./resources/mocked-data&amp;quot;, port: 8000, httpsPort: 4444, project: 'HelloShifu' }); The default port for HTTPS is 4444 2. Starting mock server with HTTPS enabled Once you add the above code, the mock server will provide the HTTPS and HTTPS support by default. Hence when the mock server starts up, you will see both the ports open. Note that the mock server auto generates the certificates (key.pem and cert.pem). If you want to provide your own key and certificate, you can provide it under the mocked data directory.</summary></entry><entry><title type="html">Rest APIs</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Rest%20APIs" rel="alternate" type="text/html" title="Rest APIs" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20401-Rest%20APIs</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Rest%20APIs">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./State&quot;&gt;State&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Mocking Utility Methods&quot;&gt;Mocking Utility Methods&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./Rest APIs&quot;&gt;Rest APIs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Starting HTTPS server with Mock Server&quot;&gt;Starting HTTPS server with Mock Server&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Mocking Utility Methods&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. Set Variant&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Method    : POST
Syntax    : {host}:{port}/_admin/api/route/{routeId}
Rest API  : curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d '{&amp;quot;variant&amp;quot;:&amp;quot;preorder&amp;quot;}' http://localhost:8000/_admin/api/route/getCollection?returnConfig=true
shifu.route({
    id: 'getCollection',
    label: 'Get Collection',
    path: '/product/grouping/api/collection/{collectionId}',
 
    variantLabel: 'default',
    handler: function(req, reply) {
        var response = getResponseData('/product/grouping/api/collection', 'default');
        reply(response);
    }
})
.variant({
    id: 'preorder',
    label: 'Get Pre-order Collection',
    handler: function (req, reply) {
        reply({message: 'hello pre-order'});
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;To get the config back as a response, add query parameter &lt;code&gt;returnConfig=true&lt;/code&gt; as shown in example above&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;2. Set Mock Id&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/setMockId/{mockid}/{sessionid}
Rest API  : curl http://localhost:8000/_admin/api/shifu/setMockId/1234/default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Get Mock Id&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/getMockId/{sessionid}
Rest API  : curl http://localhost:8000/_admin/api/shifu/getMockId/default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. Reset Mock Id&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/resetMockId/{sessionid}
Rest API  : curl http://localhost:8000/_admin/api/shifu/resetMockId/default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;5. Get Url Count&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/getURLCount/{sessionid}
Rest API  : curl http://localhost:8000/_admin/api/shifu/getURLCount/default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;6. Reset Url Count&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/resetURLCount/{sessionid}
Rest API  : curl http://localhost:8000/_admin/api/shifu/resetURLCount/default
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;7. Re-set the state of Mock Server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : POST
Syntax    : {host}:{port}/_admin/api/state/reset
Rest API  : curl -X POST http://localhost:8000/_admin/api/state/reset
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;8. Register Session&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/registerSession
Rest API  : curl http://localhost:8000/_admin/api/shifu/registerSession
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;9. Get Sessions&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/getSessions
Rest API  : curl http://localhost:8000/_admin/api/shifu/getSessions
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;10. Check Session&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/checkSession/{sessionid}
Rest API  : curl http://localhost:8000/_admin/api/shifu/checkSession/{sessionid}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;11. Close Session&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Method    : GET
Syntax    : {host}:{port}/_admin/api/shifu/closeSession/{sessionid}
Rest API  : curl http://localhost:8000/_admin/api/shifu/closeSession/{sessionid}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Starting HTTPS server with Mock Server&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">State Mocking Utility Methods Rest APIs Starting HTTPS server with Mock Server Exercise 1. Set Variant Method : POST Syntax : {host}:{port}/_admin/api/route/{routeId} Rest API : curl -H &amp;quot;Content-Type: application/json&amp;quot; -X POST -d '{&amp;quot;variant&amp;quot;:&amp;quot;preorder&amp;quot;}' http://localhost:8000/_admin/api/route/getCollection?returnConfig=true shifu.route({ id: 'getCollection', label: 'Get Collection', path: '/product/grouping/api/collection/{collectionId}', variantLabel: 'default', handler: function(req, reply) { var response = getResponseData('/product/grouping/api/collection', 'default'); reply(response); } }) .variant({ id: 'preorder', label: 'Get Pre-order Collection', handler: function (req, reply) { reply({message: 'hello pre-order'}); } }); To get the config back as a response, add query parameter returnConfig=true as shown in example above 2. Set Mock Id Method : GET Syntax : {host}:{port}/_admin/api/shifu/setMockId/{mockid}/{sessionid} Rest API : curl http://localhost:8000/_admin/api/shifu/setMockId/1234/default 3. Get Mock Id Method : GET Syntax : {host}:{port}/_admin/api/shifu/getMockId/{sessionid} Rest API : curl http://localhost:8000/_admin/api/shifu/getMockId/default 4. Reset Mock Id Method : GET Syntax : {host}:{port}/_admin/api/shifu/resetMockId/{sessionid} Rest API : curl http://localhost:8000/_admin/api/shifu/resetMockId/default 5. Get Url Count Method : GET Syntax : {host}:{port}/_admin/api/shifu/getURLCount/{sessionid} Rest API : curl http://localhost:8000/_admin/api/shifu/getURLCount/default 6. Reset Url Count Method : GET Syntax : {host}:{port}/_admin/api/shifu/resetURLCount/{sessionid} Rest API : curl http://localhost:8000/_admin/api/shifu/resetURLCount/default 7. Re-set the state of Mock Server Method : POST Syntax : {host}:{port}/_admin/api/state/reset Rest API : curl -X POST http://localhost:8000/_admin/api/state/reset 8. Register Session Method : GET Syntax : {host}:{port}/_admin/api/shifu/registerSession Rest API : curl http://localhost:8000/_admin/api/shifu/registerSession 9. Get Sessions Method : GET Syntax : {host}:{port}/_admin/api/shifu/getSessions Rest API : curl http://localhost:8000/_admin/api/shifu/getSessions 10. Check Session Method : GET Syntax : {host}:{port}/_admin/api/shifu/checkSession/{sessionid} Rest API : curl http://localhost:8000/_admin/api/shifu/checkSession/{sessionid} 11. Close Session Method : GET Syntax : {host}:{port}/_admin/api/shifu/closeSession/{sessionid} Rest API : curl http://localhost:8000/_admin/api/shifu/closeSession/{sessionid}</summary></entry><entry><title type="html">Mocking Utility Methods</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Mocking%20Utility%20Methods" rel="alternate" type="text/html" title="Mocking Utility Methods" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20401-Mocking%20Utility%20Methods</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Mocking%20Utility%20Methods">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./State&quot;&gt;State&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./Mocking Utility Methods&quot;&gt;Mocking Utility Methods&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Rest APIs&quot;&gt;Rest APIs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Starting HTTPS server with Mock Server&quot;&gt;Starting HTTPS server with Mock Server&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./State&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. RespondWithFile Utility&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
  id: 'message',
  label: 'hello message',
  path: '/message',
 
  handler: function(req, reply) {
    shifu.util.respondWithFile(this, reply);
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Setting Code&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
    id: 'message',
    label: 'hello message',
    path: '/message',

    handler: function(req, reply) {
        shifu.util.respondWithFile(this, reply, {code: 400});
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom File Location&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
    id: 'message',
    label: 'hello message',
    path: '/message',

    handler: function(req, reply) {
        shifu.util.respondWithFile(this, reply, {code: 400, filePath: '../mocked-data/fileName.json'});
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting Headers&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
id: 'message',
label: 'hello message',
path: '/message',

handler: function(req, reply) {
    var myHeaders = {
        header1: 'test1',
        header2: 'test2',
        header3: true
    };
    shifu.util.respondWithFile(this, reply, {code: 400, filePath: '../mocked-data/fileName.json', headers: myHeaders});
}
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting Cookies&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
id: 'message',
label: 'hello message',
path: '/message',

handler: function(req, reply) {
    var myHeaders = {
        header1: 'test1',
        header2: 'test2',
        header3: true
    };

    var cookies = [
        {name: 'com.wm.customer', value: 'vz7.0b5c56'},
        {name: 'CID', value: 'SmockedCID', options: {domain: 'domain', path: '/'}},
        {name: 'anotherCookie', value: 'cookieValue'}
    ];
    shifu.util.respondWithFile(this, reply, {code: 400, filePath: '../mocked-data/fileName.json', headers: myHeaders, cookies: cookies});
}
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting Delay&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
    id: 'message',
    label: 'hello message',
    path: '/message',
    handler: function(req, reply) {
        var myHeaders = {
            header1: 'test1',
            header2: 'test2',
            header3: true
        };
        var cookies = [
            {name: 'com.wm.customer', value: 'vz7.0b5c56'},
            {name: 'CID', value: 'SmockedCID', options: {domain: 'domain', path: '/'}},
            {name: 'anotherCookie', value: 'cookieValue'}
        ];
        shifu.util.respondWithFile(this, reply, {code: 400, filePath: '../mocked-data/fileName.json', headers: myHeaders, cookies: cookies, delay: 1000});
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modifying Static JSON response&lt;/p&gt;
&lt;p&gt;If you have many variants for a REST end point and the mocked data for all variants can use the same JSON response with few changes to the values, than this feature is what you need. This feature allows you to dynamically change a JSON file before sending the response back from the mock server for the request. It removes the need of having one to one mapping of static JSON files with each variants.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// Static Response JSON File
{
    &amp;quot;id&amp;quot;: &amp;quot;1234&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;toothpaste&amp;quot;,
    &amp;quot;details&amp;quot;: [
        {
            &amp;quot;flavor&amp;quot;: &amp;quot;Mint 1&amp;quot;,
            &amp;quot;Size&amp;quot;: &amp;quot;10&amp;quot;,
            &amp;quot;Size_Type&amp;quot;: &amp;quot;ounce&amp;quot;
        },
        {
            &amp;quot;flavor&amp;quot;: &amp;quot;Mint&amp;quot;,
            &amp;quot;Size&amp;quot;: &amp;quot;10&amp;quot;,
            &amp;quot;Size_Type&amp;quot;: &amp;quot;ounce&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Sample code for substituting id from 1234 to 7777 and flavor from Mint to Mint 2 for second array element in routes

shifu.route({
    id: 'Get Collection',
    label: 'Get Collections',
    path: '/product/grouping/api/collection/{collectionId}',

    handler: function(req, reply) {
        var dataToChange = {
            'id': '7777',
            'details[1].flavor': 'Mint 2'
        }
        shifu.util.respondWithFile(this, reply, {transpose: dataToChange}); 
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;// Dynamic Response JSON File returned from Mock service

{
    &amp;quot;id&amp;quot;: &amp;quot;7777&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;toothpaste&amp;quot;,
    &amp;quot;details&amp;quot;: [
        {
            &amp;quot;flavor&amp;quot;: &amp;quot;Mint 1&amp;quot;,
            &amp;quot;Size&amp;quot;: &amp;quot;10&amp;quot;,
            &amp;quot;Size_Type&amp;quot;: &amp;quot;ounce&amp;quot;
        },
        {
            &amp;quot;flavor&amp;quot;: &amp;quot;Mint 2&amp;quot;,
            &amp;quot;Size&amp;quot;: &amp;quot;10&amp;quot;,
            &amp;quot;Size_Type&amp;quot;: &amp;quot;ounce&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;2. Logging utility&lt;/h3&gt;
&lt;p&gt;Shifu exposes a logging utility which can be used to log data&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.log.debug('This is debug Message');
shifu.log.info('This is info Message');
shifu.log.error('This is error Message');
shifu.log.warn('This is warn Message');
shifu.log.setLogLevel('debug');
shifu.log.getLogLevel();
shifu.log.resetLogLevel();
// default level is INFO
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Responding with a specific variant in handlers (respondWithMockVariant)&lt;/h3&gt;
&lt;p&gt;This function will respond with a variant on the main route handler. The &lt;code&gt;variant&lt;/code&gt; passed in MUST be the variant on existing route.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.util.respondWithMockVariant(this, 'variant', reply);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;variant&lt;/code&gt; passed in MUST be the variant on existing route.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
    id: 'respondWithVariant',
    label: 'Respond With Variant',
    path: '/respondWithVariant',
    variantLabel: 'Respond With Variant Main Route',
    handler: function (req, reply) {
        shifu.util.respondWithMockVariant(this, 'variant', reply); // make sure that the variant exist in the same route.
    }
})
.variant({
    id: 'variant',
    label: 'Respond With Variant Variant Route',
    handler: function (req, reply) {
        reply({'message': 'I am an example of respond_with_mock_variant instead of response of main route '});
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;4. GetUrlCount&lt;/h3&gt;
&lt;p&gt;To get URL count for all Rest APIs mocked by mock server&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Shifu API : shifu.getURLCount(&amp;quot;default&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;5. ResetUrlCount&lt;/h3&gt;
&lt;p&gt;To resets URL count to zero&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Shifu API : shifu.resetURLCount(&amp;quot;default&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Rest APIs&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">State Mocking Utility Methods Rest APIs Starting HTTPS server with Mock Server Exercise 1. RespondWithFile Utility shifu.route({ id: 'message', label: 'hello message', path: '/message', handler: function(req, reply) { shifu.util.respondWithFile(this, reply); } }) Setting Code shifu.route({ id: 'message', label: 'hello message', path: '/message',</summary></entry><entry><title type="html">Exercise</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Exercise" rel="alternate" type="text/html" title="Exercise" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20401-Exercise</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20401/Exercise">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./State&quot;&gt;State&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Mocking Utility Methods&quot;&gt;Mocking Utility Methods&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Rest APIs&quot;&gt;Rest APIs&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Starting HTTPS server with Mock Server&quot;&gt;Starting HTTPS server with Mock Server&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Starting HTTPS server with Mock Server&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update the previous mock server with the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a logg-in route &lt;code&gt;api/login&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a log-out route &lt;code&gt;api/logout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add a state variable &lt;code&gt;loggedIn&lt;/code&gt; and set true/false value based on the above APIs.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the &lt;code&gt;get/message&lt;/code&gt; default handler to return the message &lt;code&gt;Hello: fname lname&lt;/code&gt; if user is logged in by reading from the query parameters otherwise  &lt;code&gt;Hello: Guest&lt;/code&gt; is the customer Id is less than equal to 5 characters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update the &lt;code&gt;get/message&lt;/code&gt; &lt;code&gt;Hello Universe&lt;/code&gt; variant to modify the file to following using transpose data based on if user is logged in or logged out&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;- User Logged In
{
    message: fname lname
}

- User Logged Out
{
    message: Guest
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start mock server&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit &lt;code&gt;get/message&lt;/code&gt; with customer id length &amp;lt;=5 and see you should get &lt;code&gt;Hello: Guest&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the variant to &lt;code&gt;Hello Universe&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit &lt;code&gt;get/message&lt;/code&gt; with customer id length &amp;lt;=5 and see you should get &lt;code&gt;message: Guest&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit &lt;code&gt;api/login&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the variant to default&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit http://localhost:8000/get/message/12345?fname=John&amp;amp;lname=Doe with customer id length &amp;lt;=5 and see you should get &lt;code&gt;Hello: John Doe&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set the variant to &lt;code&gt;Hello Universe&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit http://localhost:8000/get/message/12345?fname=John&amp;amp;lname=Doe with customer id length &amp;lt;=5 and see you should get &lt;code&gt;message:John Doe&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit &lt;code&gt;api/logout&lt;/code&gt; and repeat 5 to 7.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create and install certificates to enable HTTPS in Shifu.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update run-mock-server-console.js to enable https in mock server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start mock server and navigate to https://localhost:4444/_admin and repeat 5 to 12 steps.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">State Mocking Utility Methods Rest APIs Starting HTTPS server with Mock Server Exercise Update the previous mock server with the following: Add a logg-in route api/login Add a log-out route api/logout Add a state variable loggedIn and set true/false value based on the above APIs. Update the get/message default handler to return the message Hello: fname lname if user is logged in by reading from the query parameters otherwise Hello: Guest is the customer Id is less than equal to 5 characters. Update the get/message Hello Universe variant to modify the file to following using transpose data based on if user is logged in or logged out - User Logged In { message: fname lname }</summary></entry><entry><title type="html">SetMockId</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/SetMockId" rel="alternate" type="text/html" title="SetMockId" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20301-SetMockId</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/SetMockId">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Different ways of returning response data&quot;&gt;Different ways of returning response data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./SetMockId&quot;&gt;SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./APIs for SetMockId&quot;&gt;APIs for SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Parallel Sessions&quot;&gt;Parallel Sessions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Different ways of returning response data&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. What is SetMockId&lt;/h3&gt;
&lt;p&gt;This feature is very handy when you want to stub all the endpoints for a particular test without manually writing the paths for those endpoints. Generally applicable in scenarios where one page calls different endpoints according to test flows. You do not need to set variant or create variants for these endpoints. You will need to manually store the stubbed JSON files in the file structure location which are specified by your endpoints. The endpoints responses can be captured and stored under mocked data directory as a one time setup.&lt;/p&gt;
&lt;h3&gt;2. How SetMockId works?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Scenario&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lets say your test case requires to mock two end points &lt;code&gt;/api/message&lt;/code&gt; and &lt;code&gt;/api/product/getStatus&lt;/code&gt;. These endpoints are called three times each. For the first end point you always want to return the same data (in json) while for the second endpoint you want to return the same data for the first and third call (in html) and a different data for the second call (in html).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implementation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Create a folder under the mocked-data of your test directory (&lt;em&gt;this folder name is configurable when you start your mock server by passing mockedDirectory option&lt;/em&gt;) by the name &lt;code&gt;test1&lt;/code&gt;. Under this folder add the following files for your mocked response.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;api-message-GET.json&lt;/code&gt; - This will be returned for all the calls for the first endpoint with default response code 200&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api-product-getStatus-GET.html&lt;/code&gt; - This will be returned for all the calls for the second endpoint with default response code 200, except for the second and third call as it has its own file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api-product-getStatus-GET-2.html&lt;/code&gt; - This will be returned for the second call for the second endpoint with default response code 200&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api-product-getStatus-GET-3-code-201.html&lt;/code&gt; - This will be returned for the third call for the second endpoint with response code 201&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Now set the setMockId either by mock api, UI or rest call to set to &lt;code&gt;test1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Explanation&lt;/strong&gt;
The underlying mock service automatically figures out the file extension so that you do not have to specify it. If you have the same file with multiple file extension than the following order is used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;TXT&lt;/li&gt;
&lt;li&gt;First file encountered of any other extension&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Once the &lt;code&gt;shifu.setMockId(“test1”)&lt;/code&gt; API is called, Shifu only looks for the responses under the test1 folder. If it does not find the response, it will return 404 with the file name that it did not find. Shifu internally keeps track of the number of times each individual endpoint is called after &lt;code&gt;client.setMockId(“test1”)&lt;/code&gt; API is called and first looks for the file with count specific name such as &lt;code&gt;api-message-GET-1.json&lt;/code&gt;, if it does not find the said file then it looks for the default file which is &lt;code&gt;api-message-GET.json&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;3. Good To Know&lt;/h3&gt;
&lt;p&gt;If setMockId is set, then custom file path in handler&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.util.respondWithFile(this, reply, {filePath: ‘./message/GET/default.json’});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and file based on URL path &lt;code&gt;./mocked-data/api/message/get/default.json&lt;/code&gt; are ignored for the mocked response. Here is the order followed for file lookup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SetMockId&lt;/li&gt;
&lt;li&gt;Custom File Path for default or variants endpoints.&lt;/li&gt;
&lt;li&gt;File based on URL Path for default or variants endpoints.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SetMockId does not work with in-line Handler&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
  id: 'message',
  label: 'Message',
  path: '/get/message/{customerid}',
  method: 'GET',
  variantLabel: 'Hello',
  handler: function (req, reply) {
    var lname = req.query.lname;
    var fname = req.query.fname;
    var customerid = req.params.customerid;
    if (customerid.length &amp;gt; 5) {
      reply().code(400);
    } else {
      reply('Hello ' + fname + &amp;quot; &amp;quot; + lname);
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./APIs for SetMockId&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Different ways of returning response data SetMockId APIs for SetMockId Parallel Sessions Exercise 1. What is SetMockId This feature is very handy when you want to stub all the endpoints for a particular test without manually writing the paths for those endpoints. Generally applicable in scenarios where one page calls different endpoints according to test flows. You do not need to set variant or create variants for these endpoints. You will need to manually store the stubbed JSON files in the file structure location which are specified by your endpoints. The endpoints responses can be captured and stored under mocked data directory as a one time setup. 2. How SetMockId works? Scenario Lets say your test case requires to mock two end points /api/message and /api/product/getStatus. These endpoints are called three times each. For the first end point you always want to return the same data (in json) while for the second endpoint you want to return the same data for the first and third call (in html) and a different data for the second call (in html). Implementation Create a folder under the mocked-data of your test directory (this folder name is configurable when you start your mock server by passing mockedDirectory option) by the name test1. Under this folder add the following files for your mocked response. api-message-GET.json - This will be returned for all the calls for the first endpoint with default response code 200 api-product-getStatus-GET.html - This will be returned for all the calls for the second endpoint with default response code 200, except for the second and third call as it has its own file api-product-getStatus-GET-2.html - This will be returned for the second call for the second endpoint with default response code 200 api-product-getStatus-GET-3-code-201.html - This will be returned for the third call for the second endpoint with response code 201 Now set the setMockId either by mock api, UI or rest call to set to test1 Explanation The underlying mock service automatically figures out the file extension so that you do not have to specify it. If you have the same file with multiple file extension than the following order is used: JSON HTML TXT First file encountered of any other extension Once the shifu.setMockId(“test1”) API is called, Shifu only looks for the responses under the test1 folder. If it does not find the response, it will return 404 with the file name that it did not find. Shifu internally keeps track of the number of times each individual endpoint is called after client.setMockId(“test1”) API is called and first looks for the file with count specific name such as api-message-GET-1.json, if it does not find the said file then it looks for the default file which is api-message-GET.json. 3. Good To Know If setMockId is set, then custom file path in handler shifu.util.respondWithFile(this, reply, {filePath: ‘./message/GET/default.json’}); and file based on URL path ./mocked-data/api/message/get/default.json are ignored for the mocked response. Here is the order followed for file lookup: SetMockId Custom File Path for default or variants endpoints. File based on URL Path for default or variants endpoints. SetMockId does not work with in-line Handler shifu.route({ id: 'message', label: 'Message', path: '/get/message/{customerid}', method: 'GET', variantLabel: 'Hello', handler: function (req, reply) { var lname = req.query.lname; var fname = req.query.fname; var customerid = req.params.customerid; if (customerid.length &amp;gt; 5) { reply().code(400); } else { reply('Hello ' + fname + &amp;quot; &amp;quot; + lname); } } })</summary></entry><entry><title type="html">Parallel Sessions</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/Parallel%20Sessions" rel="alternate" type="text/html" title="Parallel Sessions" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20301-Parallel%20Sessions</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/Parallel%20Sessions">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Different ways of returning response data&quot;&gt;Different ways of returning response data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./SetMockId&quot;&gt;SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./APIs for SetMockId&quot;&gt;APIs for SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./Parallel Sessions&quot;&gt;Parallel Sessions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./APIs for SetMockId&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. What is parallel sessions and why it's needed?&lt;/h3&gt;
&lt;p&gt;Parallel sessions allows you to run multiple instance of server virtually while running only one server. This is helpful when you are running multiple test cases which access the same routes but different variants as parallel sessions allow you to set different variants on same routes without conflicting. This saves CPU and RAM both as only one server is running instead of multiple.&lt;/p&gt;
&lt;h3&gt;2. How Parallel Sessions works internally?&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;../../../../images/shifu_parallel_sessions.png&quot; alt=&quot;shifu_parallel_sessions&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. How to add parallel sessions?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;To add parallel sessions, modify run-mock-server-console.js to add 'sessions' parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;require('./endpoints');
var shifu = require('shifu');
shifu.start({
  host: &amp;quot;localhost&amp;quot;,
  mockedDirectory: &amp;quot;./resources/mocked-data&amp;quot;,
  port: 8000,
  sessions: 2,
  project: 'HelloShifu'
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;You can also start or add sessions via command line argument&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;node resources/run-mock-server-console.js --shifuSessions 2
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;If you pass sessions = 2, there will be two parallel sessions along with one default session.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;4. Supported APIs for Parallel sessions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Register Session
To register sessions to be used&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var sessionId = shifu.registerSession();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get Sessions
To get all the active sessions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var activeSessions = shifu.getSessions();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check Session
To check the session status (Available or In-Use or invalid)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var sessionStatus = shifu.checkSession(sessionId);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Close Session
To de-register session for later use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var closeSession = shifu.closeSession(sessionId);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;5. Using Parallel Sessions&lt;/h3&gt;
&lt;p&gt;To use a parallel session call the following api:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;curl http://localhost:8000/_admin/api/shifu/registerSession
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.registerSession()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a session id will be returned.&lt;/p&gt;
&lt;p&gt;Append this sessionId to the mocked host address to use this parallel session. For ex: If your mock host server is http://localhost:8080 and your session id is &lt;code&gt;112233&lt;/code&gt; then the mock server address for this parallel session will be http://localhost:8080/112233.&lt;/p&gt;
&lt;h3&gt;6. Verifying parallel sessions&lt;/h3&gt;
&lt;p&gt;Start mock server with two sessions. Now go to the 'Message' route. You will see three routes for message, default and two for parallel sessions that you just added. Now for each route choose a different variant and hit the URL icon. You will see that each time you will get a different value though you are hitting the same route.&lt;/p&gt;
&lt;h3&gt;7. Understanding the Shifu UI with sessions&lt;/h3&gt;
&lt;p&gt;Try to go through Shifu UI to understand sessions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Exercise&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Different ways of returning response data SetMockId APIs for SetMockId Parallel Sessions Exercise 1. What is parallel sessions and why it's needed? Parallel sessions allows you to run multiple instance of server virtually while running only one server. This is helpful when you are running multiple test cases which access the same routes but different variants as parallel sessions allow you to set different variants on same routes without conflicting. This saves CPU and RAM both as only one server is running instead of multiple. 2. How Parallel Sessions works internally? 3. How to add parallel sessions? To add parallel sessions, modify run-mock-server-console.js to add 'sessions' parameter. require('./endpoints'); var shifu = require('shifu'); shifu.start({ host: &amp;quot;localhost&amp;quot;, mockedDirectory: &amp;quot;./resources/mocked-data&amp;quot;, port: 8000, sessions: 2, project: 'HelloShifu' }); You can also start or add sessions via command line argument node resources/run-mock-server-console.js --shifuSessions 2 If you pass sessions = 2, there will be two parallel sessions along with one default session. 4. Supported APIs for Parallel sessions Register Session To register sessions to be used var sessionId = shifu.registerSession(); Get Sessions To get all the active sessions var activeSessions = shifu.getSessions(); Check Session To check the session status (Available or In-Use or invalid) var sessionStatus = shifu.checkSession(sessionId); Close Session To de-register session for later use var closeSession = shifu.closeSession(sessionId); 5. Using Parallel Sessions To use a parallel session call the following api: curl http://localhost:8000/_admin/api/shifu/registerSession or shifu.registerSession() and a session id will be returned. Append this sessionId to the mocked host address to use this parallel session. For ex: If your mock host server is http://localhost:8080 and your session id is 112233 then the mock server address for this parallel session will be http://localhost:8080/112233. 6. Verifying parallel sessions Start mock server with two sessions. Now go to the 'Message' route. You will see three routes for message, default and two for parallel sessions that you just added. Now for each route choose a different variant and hit the URL icon. You will see that each time you will get a different value though you are hitting the same route. 7. Understanding the Shifu UI with sessions Try to go through Shifu UI to understand sessions.</summary></entry><entry><title type="html">Exercise</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/Exercise" rel="alternate" type="text/html" title="Exercise" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20301-Exercise</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/Exercise">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Different ways of returning response data&quot;&gt;Different ways of returning response data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./SetMockId&quot;&gt;SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./APIs for SetMockId&quot;&gt;APIs for SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Parallel Sessions&quot;&gt;Parallel Sessions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Parallel Sessions&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Update the previous mock server with the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;Hello World&lt;/code&gt; variant of 'get/message' request to
&lt;ul&gt;
&lt;li&gt;Remove the header parameters&lt;/li&gt;
&lt;li&gt;Return the file as before by using RespondWithFile without handler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Update the default handler to return ONLY code 400 if the customer id is greater than 5 characters&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start mock server and test Step 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now add data for setMockId for &lt;code&gt;/get/message&lt;/code&gt; and &lt;code&gt;/get/number&lt;/code&gt; routes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Return the following for URL hit count 1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/get/message&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;message&amp;quot; : 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;/get/number&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;number&amp;quot; : 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return the following for URL hit count 2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/get/message&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;message&amp;quot; : 2
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;/get/number&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;number&amp;quot; : 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Return the following for default&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/get/message&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;message&amp;quot; : &amp;quot;Undefined&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;/get/number&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;number&amp;quot; : &amp;quot;Undefined&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call API to setMockId to the folder name via Shifu UI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit the rest endpoint &lt;code&gt;/get/message&lt;/code&gt; and &lt;code&gt;/get/number&lt;/code&gt; one time each and verify the response is &lt;code&gt;&amp;quot;message&amp;quot; : 1&lt;/code&gt; and &lt;code&gt;&amp;quot;number&amp;quot; : 1&lt;/code&gt; respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit the rest endpoint &lt;code&gt;/get/message&lt;/code&gt; and &lt;code&gt;/get/number&lt;/code&gt; once more and verify the response for second hit is &lt;code&gt;&amp;quot;message&amp;quot; : 2&lt;/code&gt; and &lt;code&gt;&amp;quot;number&amp;quot; : 2&lt;/code&gt; respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit the rest endpoint &lt;code&gt;/get/message&lt;/code&gt; and &lt;code&gt;/get/number&lt;/code&gt; one more time to verify that the response is &lt;code&gt;&amp;quot;message&amp;quot; : &amp;quot;undefined&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;number&amp;quot; : &amp;quot;undefined&amp;quot;&lt;/code&gt; respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call ResetMockId API via Shifu UI&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hit the rest endpoint &lt;code&gt;/get/message&lt;/code&gt; and &lt;code&gt;/get/number&lt;/code&gt; once each and verify the response is based on the handler and not on SetMockId - &lt;strong&gt;&lt;em&gt;You may have to add appropriate file based on the route path.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update run-mock-server-console.js to add two parallel sessions to the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now call GetSessionId to register a session using Shifu UI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now set &lt;code&gt;Hello World&lt;/code&gt; and &lt;code&gt;Hello Universe&lt;/code&gt; variant for &lt;code&gt;get/message&lt;/code&gt; api for the two sessions Ids respectively.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now hit the server &lt;code&gt;https://localhost:8000/sessionId/get/message&lt;/code&gt; for different session Ids and verify that you get different responses as per each variant.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Different ways of returning response data SetMockId APIs for SetMockId Parallel Sessions Exercise Update the previous mock server with the following: Update the Hello World variant of 'get/message' request to Remove the header parameters Return the file as before by using RespondWithFile without handler Update the default handler to return ONLY code 400 if the customer id is greater than 5 characters Start mock server and test Step 1 Now add data for setMockId for /get/message and /get/number routes. Return the following for URL hit count 1 /get/message { &amp;quot;message&amp;quot; : 1 } /get/number { &amp;quot;number&amp;quot; : 1 } Return the following for URL hit count 2 /get/message { &amp;quot;message&amp;quot; : 2 } /get/number { &amp;quot;number&amp;quot; : 2 } Return the following for default /get/message { &amp;quot;message&amp;quot; : &amp;quot;Undefined&amp;quot; } /get/number { &amp;quot;number&amp;quot; : &amp;quot;Undefined&amp;quot; } Call API to setMockId to the folder name via Shifu UI Hit the rest endpoint /get/message and /get/number one time each and verify the response is &amp;quot;message&amp;quot; : 1 and &amp;quot;number&amp;quot; : 1 respectively. Hit the rest endpoint /get/message and /get/number once more and verify the response for second hit is &amp;quot;message&amp;quot; : 2 and &amp;quot;number&amp;quot; : 2 respectively. Hit the rest endpoint /get/message and /get/number one more time to verify that the response is &amp;quot;message&amp;quot; : &amp;quot;undefined&amp;quot; and &amp;quot;number&amp;quot; : &amp;quot;undefined&amp;quot; respectively. Call ResetMockId API via Shifu UI Hit the rest endpoint /get/message and /get/number once each and verify the response is based on the handler and not on SetMockId - You may have to add appropriate file based on the route path. Update run-mock-server-console.js to add two parallel sessions to the server. Now call GetSessionId to register a session using Shifu UI. Now set Hello World and Hello Universe variant for get/message api for the two sessions Ids respectively. Now hit the server https://localhost:8000/sessionId/get/message for different session Ids and verify that you get different responses as per each variant.</summary></entry><entry><title type="html">Different ways of returning response data</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/Different%20ways%20of%20returning%20response%20data" rel="alternate" type="text/html" title="Different ways of returning response data" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20301-Different%20ways%20of%20returning%20response%20data</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/Different%20ways%20of%20returning%20response%20data">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./Different ways of returning response data&quot;&gt;Different ways of returning response data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./SetMockId&quot;&gt;SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./APIs for SetMockId&quot;&gt;APIs for SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Parallel Sessions&quot;&gt;Parallel Sessions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. Returning only the code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
 id: 'message',
 label: 'hello message',
 path: '/message',
 handler: function(req, reply) {
   reply().code(400);
 }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. Using &lt;code&gt;RespondWithFile&lt;/code&gt; without handler&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
  path: '/api/customer/getId',
  label: 'Get Customer Id',
  method: 'GET',
 }).respondWithFile();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. Returning static mocked data with a response code&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.route({
  id: 'message',
  label: 'hello message',
  path: '/message',
 
  handler: function(req, reply) {
    shifu.util.respondWithFile(this, reply, {code: 400});
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./SetMockId&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Different ways of returning response data SetMockId APIs for SetMockId Parallel Sessions Exercise 1. Returning only the code shifu.route({ id: 'message', label: 'hello message', path: '/message', handler: function(req, reply) { reply().code(400); } }) 2. Using RespondWithFile without handler shifu.route({ path: '/api/customer/getId', label: 'Get Customer Id', method: 'GET', }).respondWithFile(); 3. Returning static mocked data with a response code shifu.route({ id: 'message', label: 'hello message', path: '/message', handler: function(req, reply) { shifu.util.respondWithFile(this, reply, {code: 400}); } })</summary></entry><entry><title type="html">APIs for SetMockId</title><link href="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/APIs%20for%20SetMockId" rel="alternate" type="text/html" title="APIs for SetMockId" /><published>2017-11-27T00:00:00-08:00</published><updated>2017-11-27T00:00:00-08:00</updated><id>http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/documentation-Mocking-rWeb-JAVASCRIPT-Training%20Guide-Mocking%20301-APIs%20for%20SetMockId</id><content type="html" xml:base="http://0.0.0.0:8080/documentation/Mocking/rWeb/JAVASCRIPT/Training%20Guide/Mocking%20301/APIs%20for%20SetMockId">&lt;div class=&quot;sidebar&quot;&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./Different ways of returning response data&quot;&gt;Different ways of returning response data&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/checked.png&quot; srcset=&quot;/images/training/checked@2x.png 2x, /images/training/checked@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-completed&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-completed&quot; href=&quot;./SetMockId&quot;&gt;SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/actived.png&quot; srcset=&quot;/images/training/actived@2x.png 2x, /images/training/actived@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-current&quot; href=&quot;./APIs for SetMockId&quot;&gt;APIs for SetMockId&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;hr class=&quot;training-doc-link-left__hr training-doc-link-left__hr-pending&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Parallel Sessions&quot;&gt;Parallel Sessions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-link&quot;&gt;
&lt;div class=&quot;training-doc-link-left&quot;&gt;
&lt;img class=&quot;training-doc-link-left__img&quot; src=&quot;/images/training/unread.png&quot; srcset=&quot;/images/training/unread@2x.png 2x, /images/training/unread@3x.png 3x&quot; /&gt;&lt;/div&gt;
&lt;p class=&quot;training-doc-link__text&quot;&gt;
&lt;a class=&quot;training-doc-link__text-pending&quot; href=&quot;./Exercise&quot;&gt;Exercise&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./SetMockId&quot;&gt;&lt;img src=&quot;/images/training/btn-left.png&quot; srcset=&quot;/images/training/btn-left@2x.png 2x, /images/training/btn-left@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;training-content markdown&quot;&gt;
&lt;h3&gt;1. SetMockId&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.setMockId(&amp;quot;1234&amp;quot;, &amp;quot;default&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;2. GetMockId&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.getMockId(&amp;quot;default&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;3. ResetMockId&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;shifu.resetMockId(&amp;quot;default&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;training-doc-nav-btn&quot;&gt;
&lt;a href=&quot;./Parallel Sessions&quot;&gt;&lt;img src=&quot;/images/training/btn-right.png&quot; srcset=&quot;/images/training/btn-right@2x.png 2x, /images/training/btn-right@3x.png 3x&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;</content><author><name></name></author><summary type="html">Different ways of returning response data SetMockId APIs for SetMockId Parallel Sessions Exercise 1. SetMockId shifu.setMockId(&amp;quot;1234&amp;quot;, &amp;quot;default&amp;quot;); 2. GetMockId shifu.getMockId(&amp;quot;default&amp;quot;); 3. ResetMockId shifu.resetMockId(&amp;quot;default&amp;quot;);</summary></entry></feed>